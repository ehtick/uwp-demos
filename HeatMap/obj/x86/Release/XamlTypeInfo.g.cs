//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Syncfusion.SampleBrowser.UWP.HeatMap
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[44];
            _typeNameTable[0] = "Syncfusion.UI.Xaml.HeatMap.ColorMappingCollection";
            _typeNameTable[1] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>";
            _typeNameTable[2] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "Syncfusion.UI.Xaml.HeatMap.ColorMapping";
            _typeNameTable[5] = "Double";
            _typeNameTable[6] = "Windows.UI.Color";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "Boolean";
            _typeNameTable[9] = "Int32";
            _typeNameTable[10] = "Syncfusion.UI.Xaml.HeatMap.HeatMapCell";
            _typeNameTable[11] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[12] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[13] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[14] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[15] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[16] = "Syncfusion.UI.Xaml.HeatMap.RowHeader";
            _typeNameTable[17] = "Syncfusion.UI.Xaml.HeatMap.ColumnHeader";
            _typeNameTable[18] = "Syncfusion.UI.Xaml.HeatMap.TableMapping";
            _typeNameTable[19] = "Syncfusion.UI.Xaml.HeatMap.ItemsMapping";
            _typeNameTable[20] = "Syncfusion.UI.Xaml.HeatMap.ColumnMapping";
            _typeNameTable[21] = "System.Collections.Generic.List`1<Syncfusion.UI.Xaml.HeatMap.ColumnMapping>";
            _typeNameTable[22] = "String";
            _typeNameTable[23] = "Syncfusion.UI.Xaml.HeatMap.SfHeatMap";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[25] = "Syncfusion.UI.Xaml.HeatMap.HeatMapItem";
            _typeNameTable[26] = "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[28] = "Syncfusion.UI.Xaml.HeatMap.LegendMode";
            _typeNameTable[29] = "System.Enum";
            _typeNameTable[30] = "HeatMap.GettingStarted";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[32] = "Common.SampleLayout";
            _typeNameTable[33] = "System.Windows.Input.ICommand";
            _typeNameTable[34] = "HeatMap.ItemsMapping_Mobile";
            _typeNameTable[35] = "HeatMap.Legend_Mobile";
            _typeNameTable[36] = "HeatMap.GettingStarted1";
            _typeNameTable[37] = "HeatMap.ItemsMapping";
            _typeNameTable[38] = "HeatMap.Legend";
            _typeNameTable[39] = "HeatMap.Virtualization";
            _typeNameTable[40] = "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper";
            _typeNameTable[41] = "Windows.UI.Xaml.Data.Binding";
            _typeNameTable[42] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>";
            _typeNameTable[43] = "Windows.UI.Xaml.FrameworkElement";

            _typeTable = new global::System.Type[44];
            _typeTable[0] = typeof(global::Syncfusion.UI.Xaml.HeatMap.ColorMappingCollection);
            _typeTable[1] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>);
            _typeTable[2] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::Syncfusion.UI.Xaml.HeatMap.ColorMapping);
            _typeTable[5] = typeof(global::System.Double);
            _typeTable[6] = typeof(global::Windows.UI.Color);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::System.Boolean);
            _typeTable[9] = typeof(global::System.Int32);
            _typeTable[10] = typeof(global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[16] = typeof(global::Syncfusion.UI.Xaml.HeatMap.RowHeader);
            _typeTable[17] = typeof(global::Syncfusion.UI.Xaml.HeatMap.ColumnHeader);
            _typeTable[18] = typeof(global::Syncfusion.UI.Xaml.HeatMap.TableMapping);
            _typeTable[19] = typeof(global::Syncfusion.UI.Xaml.HeatMap.ItemsMapping);
            _typeTable[20] = typeof(global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping);
            _typeTable[21] = typeof(global::System.Collections.Generic.List<global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping>);
            _typeTable[22] = typeof(global::System.String);
            _typeTable[23] = typeof(global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[25] = typeof(global::Syncfusion.UI.Xaml.HeatMap.HeatMapItem);
            _typeTable[26] = typeof(global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[28] = typeof(global::Syncfusion.UI.Xaml.HeatMap.LegendMode);
            _typeTable[29] = typeof(global::System.Enum);
            _typeTable[30] = typeof(global::HeatMap.GettingStarted);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[32] = typeof(global::Common.SampleLayout);
            _typeTable[33] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[34] = typeof(global::HeatMap.ItemsMapping_Mobile);
            _typeTable[35] = typeof(global::HeatMap.Legend_Mobile);
            _typeTable[36] = typeof(global::HeatMap.GettingStarted1);
            _typeTable[37] = typeof(global::HeatMap.ItemsMapping);
            _typeTable[38] = typeof(global::HeatMap.Legend);
            _typeTable[39] = typeof(global::HeatMap.Virtualization);
            _typeTable[40] = typeof(global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Data.Binding);
            _typeTable[42] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.FrameworkElement);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ColorMappingCollection() { return new global::Syncfusion.UI.Xaml.HeatMap.ColorMappingCollection(); }
        private object Activate_1_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>(); }
        private object Activate_2_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>(); }
        private object Activate_4_ColorMapping() { return new global::Syncfusion.UI.Xaml.HeatMap.ColorMapping(); }
        private object Activate_10_HeatMapCell() { return new global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell(); }
        private object Activate_16_RowHeader() { return new global::Syncfusion.UI.Xaml.HeatMap.RowHeader(); }
        private object Activate_17_ColumnHeader() { return new global::Syncfusion.UI.Xaml.HeatMap.ColumnHeader(); }
        private object Activate_18_TableMapping() { return new global::Syncfusion.UI.Xaml.HeatMap.TableMapping(); }
        private object Activate_20_ColumnMapping() { return new global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping(); }
        private object Activate_21_List() { return new global::System.Collections.Generic.List<global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping>(); }
        private object Activate_23_SfHeatMap() { return new global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap(); }
        private object Activate_25_HeatMapItem() { return new global::Syncfusion.UI.Xaml.HeatMap.HeatMapItem(); }
        private object Activate_26_SfHeatMapLegend() { return new global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend(); }
        private object Activate_30_GettingStarted() { return new global::HeatMap.GettingStarted(); }
        private object Activate_32_SampleLayout() { return new global::Common.SampleLayout(); }
        private object Activate_34_ItemsMapping_Mobile() { return new global::HeatMap.ItemsMapping_Mobile(); }
        private object Activate_35_Legend_Mobile() { return new global::HeatMap.Legend_Mobile(); }
        private object Activate_36_GettingStarted1() { return new global::HeatMap.GettingStarted1(); }
        private object Activate_37_ItemsMapping() { return new global::HeatMap.ItemsMapping(); }
        private object Activate_38_Legend() { return new global::HeatMap.Legend(); }
        private object Activate_39_Virtualization() { return new global::HeatMap.Virtualization(); }
        private object Activate_40_SetterValueBindingHelper() { return new global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper(); }
        private object Activate_42_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>(); }
        private void VectorAdd_0_ColorMappingCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)item;
            collection.Add(newItem);
        }
        private void VectorAdd_1_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)item;
            collection.Add(newItem);
        }
        private void VectorAdd_2_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)item;
            collection.Add(newItem);
        }
        private void VectorAdd_42_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Syncfusion.UI.Xaml.HeatMap.ColorMappingCollection
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>"));
                userType.Activator = Activate_0_ColorMappingCollection;
                userType.CollectionAdd = VectorAdd_0_ColorMappingCollection;
                xamlType = userType;
                break;

            case 1:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>"));
                userType.Activator = Activate_1_ObservableCollection;
                userType.CollectionAdd = VectorAdd_1_ObservableCollection;
                xamlType = userType;
                break;

            case 2:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_Collection;
                userType.CollectionAdd = VectorAdd_2_Collection;
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Syncfusion.UI.Xaml.HeatMap.ColorMapping
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ColorMapping;
                userType.AddMemberName("Value");
                userType.AddMemberName("Color");
                userType.AddMemberName("NullColor");
                userType.AddMemberName("Label");
                xamlType = userType;
                break;

            case 5:   //  Double
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Color
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Boolean
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Int32
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Syncfusion.UI.Xaml.HeatMap.HeatMapCell
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_10_HeatMapCell;
                userType.AddMemberName("ShowContent");
                userType.AddMemberName("ValueFormatConverter");
                userType.AddMemberName("GridLineThickness");
                userType.AddMemberName("GridLineBrush");
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Syncfusion.UI.Xaml.HeatMap.RowHeader
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell"));
                userType.Activator = Activate_16_RowHeader;
                xamlType = userType;
                break;

            case 17:   //  Syncfusion.UI.Xaml.HeatMap.ColumnHeader
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell"));
                userType.Activator = Activate_17_ColumnHeader;
                xamlType = userType;
                break;

            case 18:   //  Syncfusion.UI.Xaml.HeatMap.TableMapping
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ItemsMapping"));
                userType.Activator = Activate_18_TableMapping;
                userType.AddMemberName("HeaderMapping");
                userType.AddMemberName("ColumnMapping");
                xamlType = userType;
                break;

            case 19:   //  Syncfusion.UI.Xaml.HeatMap.ItemsMapping
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("ItemsSource");
                xamlType = userType;
                break;

            case 20:   //  Syncfusion.UI.Xaml.HeatMap.ColumnMapping
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_ColumnMapping;
                userType.AddMemberName("PropertyName");
                userType.AddMemberName("DisplayName");
                xamlType = userType;
                break;

            case 21:   //  System.Collections.Generic.List`1<Syncfusion.UI.Xaml.HeatMap.ColumnMapping>
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_21_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  String
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Syncfusion.UI.Xaml.HeatMap.SfHeatMap
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_23_SfHeatMap;
                userType.AddMemberName("ColorMappingCollection");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemsMapping");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Syncfusion.UI.Xaml.HeatMap.HeatMapItem
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_26_SfHeatMapLegend;
                userType.AddMemberName("ColorMappingCollection");
                userType.AddMemberName("GradientLegend");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("LegendMode");
                userType.AddMemberName("ShowLabel");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Syncfusion.UI.Xaml.HeatMap.LegendMode
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Gradient", global::Syncfusion.UI.Xaml.HeatMap.LegendMode.Gradient);
                userType.AddEnumValue("List", global::Syncfusion.UI.Xaml.HeatMap.LegendMode.List);
                xamlType = userType;
                break;

            case 29:   //  System.Enum
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 30:   //  HeatMap.GettingStarted
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_30_GettingStarted;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Common.SampleLayout
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_SampleLayout;
                userType.AddMemberName("Sample");
                userType.AddMemberName("Header");
                userType.AddMemberName("Setting");
                userType.AddMemberName("OptionVisibility");
                userType.AddMemberName("FontIcons");
                userType.AddMemberName("Pathstring");
                userType.AddMemberName("ClickCommand");
                xamlType = userType;
                break;

            case 33:   //  System.Windows.Input.ICommand
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  HeatMap.ItemsMapping_Mobile
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_34_ItemsMapping_Mobile;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  HeatMap.Legend_Mobile
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_35_Legend_Mobile;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  HeatMap.GettingStarted1
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_36_GettingStarted1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  HeatMap.ItemsMapping
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_37_ItemsMapping;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  HeatMap.Legend
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_38_Legend;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  HeatMap.Virtualization
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Common.SampleLayout"));
                userType.Activator = Activate_39_Virtualization;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_SetterValueBindingHelper;
                userType.AddMemberName("Type");
                userType.AddMemberName("Property");
                userType.AddMemberName("Binding");
                userType.AddMemberName("Values");
                userType.AddMemberName("PropertyBinding");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Data.Binding
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>
                userType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_42_Collection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Common_2015.Syncfusion_SampleBrowser_UWP_Common_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfAccordion_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfBarcode.UWP.Syncfusion_SfBarcode_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.BulletGraph.Syncfusion_SfBulletGraph_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Notification.Syncfusion_SfBusyIndicator_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfCarousel_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.CellGrid.Syncfusion_SfCellGrid_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfChart.UWP.Syncfusion_SfChart_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Media.Syncfusion_SfColorPickers_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfDiagram.UWP.Syncfusion_SfDiagram_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfDockingManager_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfGantt.UWP.Syncfusion_SfGantt_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Gauges.Syncfusion_SfGauge_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Grid.Syncfusion_SfGrid_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Grid.Syncfusion_SfGridCommon_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfGroupBar_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.HeatMap.Syncfusion_SfHeatMap_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Notification.Syncfusion_SfHubTile_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfImageEditor.UWP.Syncfusion_SfImageEditor_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Input.Syncfusion_SfInput_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfKanban.UWP.Syncfusion_SfKanban_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Maps.Syncfusion_SfMaps_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfMenu_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.NavigationDrawer.Syncfusion_SfNavigationDrawer_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.PdfViewer.Syncfusion_SfPdfViewer_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PivotChart.Syncfusion_SfPivotChart_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PivotClient.Syncfusion_SfPivotClient_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PivotGauge.Syncfusion_SfPivotGauge_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PivotGrid.Syncfusion_SfPivotGrid_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PivotShared.Syncfusion_SfPivotShared_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Notification.Syncfusion_SfProgressBar_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.PullToRefresh.Syncfusion_SfPullToRefresh_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfRadialMenu_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.SfRibbon.Syncfusion_SfRibbon_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.RichTextBoxAdv.Syncfusion_SfRichTextBoxAdv_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Rotator.Syncfusion_SfRotator_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Schedule.Syncfusion_SfSchedule_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Syncfusion_SfShared_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfSmithChart.UWP.Syncfusion_SfSmithChart_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Syncfusion_SfSpellChecker_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Spreadsheet.Syncfusion_SfSpreadsheet_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.SunburstChart.Syncfusion_SfSunburstChart_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfTabControl_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Layout.Syncfusion_SfTileView_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.TreeMap.Syncfusion_SfTreeMap_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Controls.Navigation.Syncfusion_SfTreeNavigator_UWP_2017_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ColorMapping_Value(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            return that.Value;
        }
        private void set_0_ColorMapping_Value(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_1_ColorMapping_Color(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            return that.Color;
        }
        private void set_1_ColorMapping_Color(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_2_ColorMapping_NullColor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            return that.NullColor;
        }
        private void set_2_ColorMapping_NullColor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            that.NullColor = (global::System.Boolean)Value;
        }
        private object get_3_ColorMapping_Label(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            return that.Label;
        }
        private void set_3_ColorMapping_Label(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColorMapping)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_4_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.HeatMap.ColorMapping>)instance;
            return that.Count;
        }
        private object get_5_HeatMapCell_ShowContent(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            return that.ShowContent;
        }
        private void set_5_HeatMapCell_ShowContent(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            that.ShowContent = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_6_HeatMapCell_ValueFormatConverter(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            return that.ValueFormatConverter;
        }
        private void set_6_HeatMapCell_ValueFormatConverter(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            that.ValueFormatConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_7_HeatMapCell_GridLineThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            return that.GridLineThickness;
        }
        private void set_7_HeatMapCell_GridLineThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            that.GridLineThickness = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_8_HeatMapCell_GridLineBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            return that.GridLineBrush;
        }
        private void set_8_HeatMapCell_GridLineBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapCell)instance;
            that.GridLineBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_9_TableMapping_HeaderMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.TableMapping)instance;
            return that.HeaderMapping;
        }
        private void set_9_TableMapping_HeaderMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.TableMapping)instance;
            that.HeaderMapping = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)Value;
        }
        private object get_10_TableMapping_ColumnMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.TableMapping)instance;
            return that.ColumnMapping;
        }
        private void set_10_TableMapping_ColumnMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.TableMapping)instance;
            that.ColumnMapping = (global::System.Collections.Generic.List<global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping>)Value;
        }
        private object get_11_ColumnMapping_PropertyName(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)instance;
            return that.PropertyName;
        }
        private void set_11_ColumnMapping_PropertyName(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)instance;
            that.PropertyName = (global::System.String)Value;
        }
        private object get_12_ColumnMapping_DisplayName(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)instance;
            return that.DisplayName;
        }
        private void set_12_ColumnMapping_DisplayName(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ColumnMapping)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_13_ItemsMapping_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.ItemsMapping)instance;
            return that.ItemsSource;
        }
        private object get_14_SfHeatMap_ColorMappingCollection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            return that.ColorMappingCollection;
        }
        private void set_14_SfHeatMap_ColorMappingCollection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            that.ColorMappingCollection = (global::System.Object)Value;
        }
        private object get_15_SfHeatMap_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            return that.ItemsSource;
        }
        private void set_15_SfHeatMap_ItemsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_16_SfHeatMap_ItemsMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            return that.ItemsMapping;
        }
        private void set_16_SfHeatMap_ItemsMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            that.ItemsMapping = (global::Syncfusion.UI.Xaml.HeatMap.ItemsMapping)Value;
        }
        private object get_17_SfHeatMap_SelectedItem(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            return that.SelectedItem;
        }
        private void set_17_SfHeatMap_SelectedItem(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMap)instance;
            that.SelectedItem = (global::Syncfusion.UI.Xaml.HeatMap.HeatMapItem)Value;
        }
        private object get_18_SfHeatMapLegend_ColorMappingCollection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            return that.ColorMappingCollection;
        }
        private void set_18_SfHeatMapLegend_ColorMappingCollection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            that.ColorMappingCollection = (global::System.Object)Value;
        }
        private object get_19_SfHeatMapLegend_GradientLegend(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            return that.GradientLegend;
        }
        private void set_19_SfHeatMapLegend_GradientLegend(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            that.GradientLegend = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_20_SfHeatMapLegend_Orientation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            return that.Orientation;
        }
        private void set_20_SfHeatMapLegend_Orientation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_21_SfHeatMapLegend_LegendMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            return that.LegendMode;
        }
        private void set_21_SfHeatMapLegend_LegendMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            that.LegendMode = (global::Syncfusion.UI.Xaml.HeatMap.LegendMode)Value;
        }
        private object get_22_SfHeatMapLegend_ShowLabel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            return that.ShowLabel;
        }
        private void set_22_SfHeatMapLegend_ShowLabel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend)instance;
            that.ShowLabel = (global::System.Boolean)Value;
        }
        private object get_23_SampleLayout_Sample(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.Sample;
        }
        private void set_23_SampleLayout_Sample(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.Sample = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_24_SampleLayout_Header(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.Header;
        }
        private void set_24_SampleLayout_Header(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.Header = (global::System.String)Value;
        }
        private object get_25_SampleLayout_Setting(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.Setting;
        }
        private void set_25_SampleLayout_Setting(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.Setting = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_26_SampleLayout_OptionVisibility(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.OptionVisibility;
        }
        private void set_26_SampleLayout_OptionVisibility(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.OptionVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_27_SampleLayout_FontIcons(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.FontIcons;
        }
        private void set_27_SampleLayout_FontIcons(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.FontIcons = (global::System.String)Value;
        }
        private object get_28_SampleLayout_Pathstring(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.Pathstring;
        }
        private void set_28_SampleLayout_Pathstring(object instance, object Value)
        {
            var that = (global::Common.SampleLayout)instance;
            that.Pathstring = (global::System.String)Value;
        }
        private object get_29_SampleLayout_ClickCommand(object instance)
        {
            var that = (global::Common.SampleLayout)instance;
            return that.ClickCommand;
        }
        private object get_30_SetterValueBindingHelper_Type(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Type;
        }
        private void set_30_SetterValueBindingHelper_Type(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_31_SetterValueBindingHelper_Property(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Property;
        }
        private void set_31_SetterValueBindingHelper_Property(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Property = (global::System.String)Value;
        }
        private object get_32_SetterValueBindingHelper_Binding(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Binding;
        }
        private void set_32_SetterValueBindingHelper_Binding(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            that.Binding = (global::Windows.UI.Xaml.Data.Binding)Value;
        }
        private object get_33_SetterValueBindingHelper_Values(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)instance;
            return that.Values;
        }
        private object get_34_SetterValueBindingHelper_PropertyBinding(object instance)
        {
            return global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.GetPropertyBinding((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_34_SetterValueBindingHelper_PropertyBinding(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.SetPropertyBinding((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper)Value);
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember xamlMember = null;
            global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Syncfusion.UI.Xaml.HeatMap.ColorMapping.Value":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColorMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_0_ColorMapping_Value;
                xamlMember.Setter = set_0_ColorMapping_Value;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ColorMapping.Color":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColorMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_1_ColorMapping_Color;
                xamlMember.Setter = set_1_ColorMapping_Color;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ColorMapping.NullColor":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColorMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "NullColor", "Boolean");
                xamlMember.Getter = get_2_ColorMapping_NullColor;
                xamlMember.Setter = set_2_ColorMapping_NullColor;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ColorMapping.Label":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColorMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.Getter = get_3_ColorMapping_Label;
                xamlMember.Setter = set_3_ColorMapping_Label;
                break;
            case "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>.Count":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.HeatMap.ColorMapping>");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_4_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.HeatMap.HeatMapCell.ShowContent":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ShowContent", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_HeatMapCell_ShowContent;
                xamlMember.Setter = set_5_HeatMapCell_ShowContent;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.HeatMapCell.ValueFormatConverter":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ValueFormatConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_HeatMapCell_ValueFormatConverter;
                xamlMember.Setter = set_6_HeatMapCell_ValueFormatConverter;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.HeatMapCell.GridLineThickness":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "GridLineThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_HeatMapCell_GridLineThickness;
                xamlMember.Setter = set_7_HeatMapCell_GridLineThickness;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.HeatMapCell.GridLineBrush":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.HeatMapCell");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "GridLineBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_HeatMapCell_GridLineBrush;
                xamlMember.Setter = set_8_HeatMapCell_GridLineBrush;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.TableMapping.HeaderMapping":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.TableMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "HeaderMapping", "Syncfusion.UI.Xaml.HeatMap.ColumnMapping");
                xamlMember.Getter = get_9_TableMapping_HeaderMapping;
                xamlMember.Setter = set_9_TableMapping_HeaderMapping;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.TableMapping.ColumnMapping":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.TableMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ColumnMapping", "System.Collections.Generic.List`1<Syncfusion.UI.Xaml.HeatMap.ColumnMapping>");
                xamlMember.Getter = get_10_TableMapping_ColumnMapping;
                xamlMember.Setter = set_10_TableMapping_ColumnMapping;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ColumnMapping.PropertyName":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColumnMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "PropertyName", "String");
                xamlMember.Getter = get_11_ColumnMapping_PropertyName;
                xamlMember.Setter = set_11_ColumnMapping_PropertyName;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ColumnMapping.DisplayName":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ColumnMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_12_ColumnMapping_DisplayName;
                xamlMember.Setter = set_12_ColumnMapping_DisplayName;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.ItemsMapping.ItemsSource":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.ItemsMapping");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.Getter = get_13_ItemsMapping_ItemsSource;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMap.ColorMappingCollection":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMap");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ColorMappingCollection", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_SfHeatMap_ColorMappingCollection;
                xamlMember.Setter = set_14_SfHeatMap_ColorMappingCollection;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMap.ItemsSource":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMap");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_SfHeatMap_ItemsSource;
                xamlMember.Setter = set_15_SfHeatMap_ItemsSource;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMap.ItemsMapping":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMap");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ItemsMapping", "Syncfusion.UI.Xaml.HeatMap.ItemsMapping");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SfHeatMap_ItemsMapping;
                xamlMember.Setter = set_16_SfHeatMap_ItemsMapping;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMap.SelectedItem":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMap");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "SelectedItem", "Syncfusion.UI.Xaml.HeatMap.HeatMapItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_SfHeatMap_SelectedItem;
                xamlMember.Setter = set_17_SfHeatMap_SelectedItem;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend.ColorMappingCollection":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ColorMappingCollection", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_SfHeatMapLegend_ColorMappingCollection;
                xamlMember.Setter = set_18_SfHeatMapLegend_ColorMappingCollection;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend.GradientLegend":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "GradientLegend", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_SfHeatMapLegend_GradientLegend;
                xamlMember.Setter = set_19_SfHeatMapLegend_GradientLegend;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend.Orientation":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SfHeatMapLegend_Orientation;
                xamlMember.Setter = set_20_SfHeatMapLegend_Orientation;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend.LegendMode":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "LegendMode", "Syncfusion.UI.Xaml.HeatMap.LegendMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_SfHeatMapLegend_LegendMode;
                xamlMember.Setter = set_21_SfHeatMapLegend_LegendMode;
                break;
            case "Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend.ShowLabel":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.HeatMap.SfHeatMapLegend");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ShowLabel", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_SfHeatMapLegend_ShowLabel;
                xamlMember.Setter = set_22_SfHeatMapLegend_ShowLabel;
                break;
            case "Common.SampleLayout.Sample":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Sample", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_SampleLayout_Sample;
                xamlMember.Setter = set_23_SampleLayout_Sample;
                break;
            case "Common.SampleLayout.Header":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Header", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_SampleLayout_Header;
                xamlMember.Setter = set_24_SampleLayout_Header;
                break;
            case "Common.SampleLayout.Setting":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Setting", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_SampleLayout_Setting;
                xamlMember.Setter = set_25_SampleLayout_Setting;
                break;
            case "Common.SampleLayout.OptionVisibility":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "OptionVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_SampleLayout_OptionVisibility;
                xamlMember.Setter = set_26_SampleLayout_OptionVisibility;
                break;
            case "Common.SampleLayout.FontIcons":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "FontIcons", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_SampleLayout_FontIcons;
                xamlMember.Setter = set_27_SampleLayout_FontIcons;
                break;
            case "Common.SampleLayout.Pathstring":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Pathstring", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_SampleLayout_Pathstring;
                xamlMember.Setter = set_28_SampleLayout_Pathstring;
                break;
            case "Common.SampleLayout.ClickCommand":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Common.SampleLayout");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "ClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_29_SampleLayout_ClickCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Type":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_30_SetterValueBindingHelper_Type;
                xamlMember.Setter = set_30_SetterValueBindingHelper_Type;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Property":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Property", "String");
                xamlMember.Getter = get_31_SetterValueBindingHelper_Property;
                xamlMember.Setter = set_31_SetterValueBindingHelper_Property;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Binding":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Binding", "Windows.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_32_SetterValueBindingHelper_Binding;
                xamlMember.Setter = set_32_SetterValueBindingHelper_Binding;
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.Values":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "Values", "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper>");
                xamlMember.Getter = get_33_SetterValueBindingHelper_Values;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper.PropertyBinding":
                userType = (global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember = new global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlMember(this, "PropertyBinding", "Syncfusion.UI.Xaml.Utils.SetterValueBindingHelper");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_34_SetterValueBindingHelper_PropertyBinding;
                xamlMember.Setter = set_34_SetterValueBindingHelper_PropertyBinding;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlSystemBaseType
    {
        global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Syncfusion.SampleBrowser.UWP.HeatMap.Syncfusion_SampleBrowser_UWP_HeatMap_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

